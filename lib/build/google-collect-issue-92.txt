Index: src/com/google/common/base/FinalizableReferenceQueue.java
===================================================================
--- src/com/google/common/base/FinalizableReferenceQueue.java	(revision 69)
+++ src/com/google/common/base/FinalizableReferenceQueue.java	(working copy)
@@ -16,6 +16,7 @@
 
 package com.google.common.base;
 
+import static java.security.AccessController.doPrivileged;
 import java.lang.ref.ReferenceQueue;
 import java.lang.reflect.Method;
 import java.lang.reflect.InvocationTargetException;
@@ -26,6 +27,7 @@
 import java.net.URISyntaxException;
 import java.io.IOException;
 import java.io.FileNotFoundException;
+import java.security.PrivilegedAction;
 
 /**
  * A reference queue with an associated background thread that dequeues
@@ -241,8 +243,12 @@
     }
 
     /** Creates a class loader with the given base URL as its classpath. */
-    URLClassLoader newLoader(URL base) {
-      return new URLClassLoader(new URL[] { base });
+    ClassLoader newLoader(final URL base) {
+      return doPrivileged(new PrivilegedAction<ClassLoader>() {
+        public ClassLoader run() {
+          return new URLClassLoader(new URL[] { base });
+        }
+      });
     }
   }
 
Index: src/com/google/common/base/internal/Finalizer.java
===================================================================
--- src/com/google/common/base/internal/Finalizer.java	(revision 69)
+++ src/com/google/common/base/internal/Finalizer.java	(working copy)
@@ -16,6 +16,7 @@
 
 package com.google.common.base.internal;
 
+import static java.security.AccessController.doPrivileged;
 import java.util.logging.Logger;
 import java.util.logging.Level;
 import java.lang.ref.ReferenceQueue;
@@ -23,6 +24,7 @@
 import java.lang.ref.WeakReference;
 import java.lang.ref.PhantomReference;
 import java.lang.reflect.Method;
+import java.security.PrivilegedAction;
 
 /**
  * Thread that finalizes referents. All references should implement
@@ -64,7 +66,7 @@
    * @return ReferenceQueue which Finalizer will poll
    */
   public static ReferenceQueue<Object> startFinalizer(
-      Class<?> finalizableReferenceClass, Object frq) {
+      final Class<?> finalizableReferenceClass, final Object frq) {
     /*
      * We use FinalizableReference.class for two things:
      *
@@ -78,7 +80,12 @@
           "Expected " + FINALIZABLE_REFERENCE + ".");
     }
 
-    Finalizer finalizer = new Finalizer(finalizableReferenceClass, frq);
+    Finalizer finalizer = doPrivileged(new PrivilegedAction<Finalizer>() {
+      public Finalizer run() {
+        return new Finalizer(finalizableReferenceClass, frq);
+      }
+    });
+
     finalizer.start();
     return finalizer.queue;
   }
@@ -97,6 +104,8 @@
     // Keep track of the FRQ that started us so we know when to stop.
     this.frqReference = new PhantomReference<Object>(frq, queue);
 
+    // avoid inherited reference
+    setContextClassLoader(null);
     setDaemon(true);
 
     // TODO: Priority?
