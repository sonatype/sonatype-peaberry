Index: src/com/google/inject/DefaultConstructionProxyFactory.java
===================================================================
--- src/com/google/inject/DefaultConstructionProxyFactory.java	(revision 466)
+++ src/com/google/inject/DefaultConstructionProxyFactory.java	(working copy)
@@ -17,7 +17,7 @@
 package com.google.inject;
 
 import com.google.inject.internal.ErrorHandler;
-import com.google.inject.internal.GuiceFastClass;
+import com.google.inject.internal.GuiceCodeGen;
 import net.sf.cglib.reflect.FastClass;
 import net.sf.cglib.reflect.FastConstructor;
 
@@ -70,7 +70,7 @@
     }
 
     Class<T> classToConstruct = constructor.getDeclaringClass();
-    FastClass fastClass = GuiceFastClass.create(classToConstruct);
+    FastClass fastClass = GuiceCodeGen.getFastClass(classToConstruct);
     final FastConstructor fastConstructor
         = fastClass.getConstructor(constructor);
     return new ConstructionProxy<T>() {
Index: src/com/google/inject/internal/GuiceFastClass.java
===================================================================
--- src/com/google/inject/internal/GuiceFastClass.java	(revision 466)
+++ src/com/google/inject/internal/GuiceFastClass.java	(working copy)
@@ -1,39 +0,0 @@
-/**
- * Copyright (C) 2006 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.inject.internal;
-
-import net.sf.cglib.reflect.FastClass;
-
-/**
- * Gives Guice classes custom names.
- *
- * @author crazybob@google.com (Bob Lee)
- */
-public class GuiceFastClass {
-
-  public static FastClass create(Class type) {
-    return create(type.getClassLoader(), type);
-  }
-
-  public static FastClass create(ClassLoader loader, Class type) {
-    FastClass.Generator generator = new FastClass.Generator();
-    generator.setType(type);
-    generator.setClassLoader(loader);
-    generator.setNamingPolicy(new GuiceNamingPolicy());
-    return generator.create();
-  }
-}
Index: src/com/google/inject/internal/GuiceCodeGen.java
===================================================================
--- src/com/google/inject/internal/GuiceCodeGen.java	(revision 0)
+++ src/com/google/inject/internal/GuiceCodeGen.java	(revision 0)
@@ -0,0 +1,93 @@
+/**
+ * Copyright (C) 2007 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.inject.internal;
+
+import com.google.inject.ClassLoaderHook;
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Proxy;
+import net.sf.cglib.core.NamingPolicy;
+import net.sf.cglib.proxy.Enhancer;
+import net.sf.cglib.reflect.FastClass;
+
+/**
+ * Handles all code generation for Guice.
+ *
+ * @author stuart.mcculloch@jayway.net (Stuart McCulloch)
+ */
+public final class GuiceCodeGen {
+
+  private static final NamingPolicy NAMING_POLICY = new GuiceNamingPolicy();
+
+  private static final ClassLoaderHook DEFAULT_CLASSLOADER_HOOK =
+      new ClassLoaderHook() {
+        public final ClassLoader intercept(ClassLoader loader) {return loader;}
+      };
+
+  private static final ThreadLocal<ClassLoaderHook> THREAD_CLASS_LOADER_HOOK =
+      new InheritableThreadLocal<ClassLoaderHook>() {
+        protected ClassLoaderHook initialValue() {
+          return DEFAULT_CLASSLOADER_HOOK;
+        }
+      };
+
+  public static ClassLoaderHook getThreadClassLoaderHook() {
+    return THREAD_CLASS_LOADER_HOOK.get();
+  }
+
+  public static void setThreadClassLoaderHook(ClassLoaderHook classLoaderHook) {
+    if (classLoaderHook != null) {
+      THREAD_CLASS_LOADER_HOOK.set(classLoaderHook);
+    } else {
+      THREAD_CLASS_LOADER_HOOK.remove();
+    }
+  }
+
+  public static ClassLoader getClassLoader(Class<?> type) {
+    return getThreadClassLoaderHook().intercept(type.getClassLoader());
+  }
+
+  public static FastClass getFastClass(Class<?> type) {
+    FastClass.Generator generator = new FastClass.Generator();
+
+    generator.setType(type);
+    generator.setClassLoader(getClassLoader(type));
+    generator.setNamingPolicy(NAMING_POLICY);
+
+    return generator.create();
+  }
+
+  public static Enhancer getEnhancer(final Class<?> type) {
+    Enhancer enhancer = new Enhancer() {
+        protected ClassLoader getDefaultClassLoader() {
+          return getThreadClassLoaderHook().intercept(
+              super.getDefaultClassLoader());
+        }
+      };
+
+    enhancer.setSuperclass(type);
+    enhancer.setUseCache(false); // We do enough caching.
+    enhancer.setUseFactory(false);
+    enhancer.setNamingPolicy(NAMING_POLICY);
+
+    return enhancer;
+  }
+
+  public static Object getProxy(Class<?> type, InvocationHandler handler) {
+    return Proxy.newProxyInstance(getClassLoader(type),
+        new Class[] {type}, handler);
+  }
+}

Property changes on: src/com/google/inject/internal/GuiceCodeGen.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: src/com/google/inject/InjectorImpl.java
===================================================================
--- src/com/google/inject/InjectorImpl.java	(revision 466)
+++ src/com/google/inject/InjectorImpl.java	(working copy)
@@ -962,7 +962,7 @@
         };
       }
       else {
-        FastClass fastClass = GuiceFastClass.create(method.getDeclaringClass());
+        FastClass fastClass = GuiceCodeGen.getFastClass(method.getDeclaringClass());
         final FastMethod fastMethod = fastClass.getMethod(method);
 
         this.methodInvoker = new MethodInvoker() {
@@ -1172,7 +1172,7 @@
       }
       finally {
         // Only remove the context if this call created it.
-        reference[0] = null;
+        localContext.remove();
       }
     }
     else {
Index: src/com/google/inject/ProxyFactory.java
===================================================================
--- src/com/google/inject/ProxyFactory.java	(revision 466)
+++ src/com/google/inject/ProxyFactory.java	(working copy)
@@ -141,17 +141,13 @@
     }
 
     // Create the proxied class.
-    Enhancer enhancer = new Enhancer();
-    enhancer.setSuperclass(declaringClass);
-    enhancer.setUseCache(false); // We do enough caching.
+    Enhancer enhancer = GuiceCodeGen.getEnhancer(declaringClass);
     enhancer.setCallbackFilter(new CallbackFilter() {
       public int accept(Method method) {
         return indices.get(method);
       }
     });
     enhancer.setCallbackTypes(callbackTypes);
-    enhancer.setUseFactory(false);
-    enhancer.setNamingPolicy(new GuiceNamingPolicy());
 
     Class<?> proxied = enhancer.createClass();
 
@@ -166,7 +162,7 @@
    */
   private <T> ConstructionProxy<T> createConstructionProxy(final Class<?> clazz,
       final Constructor standardConstructor) {
-    FastClass fastClass = GuiceFastClass.create(clazz);
+    FastClass fastClass = GuiceCodeGen.getFastClass(clazz);
     final FastConstructor fastConstructor
         = fastClass.getConstructor(standardConstructor.getParameterTypes());
     return new ConstructionProxy<T>() {
Index: src/com/google/inject/ConstructionContext.java
===================================================================
--- src/com/google/inject/ConstructionContext.java	(revision 466)
+++ src/com/google/inject/ConstructionContext.java	(working copy)
@@ -19,10 +19,11 @@
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.lang.reflect.Proxy;
 import java.util.ArrayList;
 import java.util.List;
 
+import com.google.inject.internal.GuiceCodeGen;
+
 /**
  * Context of a dependency construction. Used to manage circular references.
  *
@@ -80,8 +81,7 @@
         = new DelegatingInvocationHandler<T>();
     invocationHandlers.add(invocationHandler);
 
-    Object object = Proxy.newProxyInstance(expectedType.getClassLoader(),
-        new Class[] { expectedType }, invocationHandler);
+    Object object = GuiceCodeGen.getProxy(expectedType, invocationHandler);
     return expectedType.cast(object);
   }
 
Index: src/com/google/inject/ClassLoaderHook.java
===================================================================
--- src/com/google/inject/ClassLoaderHook.java	(revision 0)
+++ src/com/google/inject/ClassLoaderHook.java	(revision 0)
@@ -0,0 +1,33 @@
+/**
+ * Copyright (C) 2007 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.inject;
+
+/**
+ * Provide classloading interception for Guice enhanced classes and proxies.
+ * 
+ * @author stuart.mcculloch@jayway.net (Stuart McCulloch)
+ */
+public interface ClassLoaderHook {
+
+  /**
+   * Intercept classloading request.
+   * 
+   * @param loader classloader involved in request
+   * @return potentially intercepted classloader
+   */
+  ClassLoader intercept(ClassLoader loader);
+}

Property changes on: src/com/google/inject/ClassLoaderHook.java
___________________________________________________________________
Name: svn:eol-style
   + native

