Index: src/com/google/inject/DefaultConstructionProxyFactory.java
===================================================================
--- src/com/google/inject/DefaultConstructionProxyFactory.java	(revision 516)
+++ src/com/google/inject/DefaultConstructionProxyFactory.java	(working copy)
@@ -18,7 +18,7 @@
 
 import com.google.inject.internal.Errors;
 import com.google.inject.internal.ErrorsException;
-import com.google.inject.internal.GuiceFastClass;
+import com.google.inject.internal.GuiceCodeGen;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Modifier;
@@ -67,7 +67,7 @@
 
     return new ConstructionProxy<T>() {
       Class<T> classToConstruct = constructor.getDeclaringClass();
-      FastClass fastClass = GuiceFastClass.create(classToConstruct);
+      FastClass fastClass = GuiceCodeGen.newFastClass(classToConstruct);
       final FastConstructor fastConstructor = fastClass.getConstructor(constructor);
 
       @SuppressWarnings("unchecked")
Index: src/com/google/inject/internal/GuiceFastClass.java
===================================================================
--- src/com/google/inject/internal/GuiceFastClass.java	(revision 516)
+++ src/com/google/inject/internal/GuiceFastClass.java	(working copy)
@@ -1,39 +0,0 @@
-/**
- * Copyright (C) 2006 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.inject.internal;
-
-import net.sf.cglib.reflect.FastClass;
-
-/**
- * Gives Guice classes custom names.
- *
- * @author crazybob@google.com (Bob Lee)
- */
-public class GuiceFastClass {
-
-  public static FastClass create(Class type) {
-    return create(type.getClassLoader(), type);
-  }
-
-  public static FastClass create(ClassLoader loader, Class type) {
-    FastClass.Generator generator = new FastClass.Generator();
-    generator.setType(type);
-    generator.setClassLoader(loader);
-    generator.setNamingPolicy(new GuiceNamingPolicy());
-    return generator.create();
-  }
-}
Index: src/com/google/inject/internal/NonDelegatingClassLoaderHook.java
===================================================================
--- src/com/google/inject/internal/NonDelegatingClassLoaderHook.java	(revision 0)
+++ src/com/google/inject/internal/NonDelegatingClassLoaderHook.java	(revision 0)
@@ -0,0 +1,94 @@
+/**
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.inject.internal;
+
+import static com.google.inject.internal.ReferenceType.WEAK;
+import static java.security.AccessController.doPrivileged;
+
+import java.security.PrivilegedAction;
+
+/**
+ * Hook to support Guice inside non-delegating classloader containers like OSGi,
+ * where the CGLIB proxy/reflection classes may not be visible to client types.
+ * 
+ * @author mcculls@gmail.com (Stuart McCulloch)
+ */
+public final class NonDelegatingClassLoaderHook
+    implements ClassLoaderHook {
+
+  /**
+   * Custom classloader that delegates between client and Guice class spaces.
+   */
+  private static class BridgeClassLoader
+      extends ClassLoader {
+
+    private static final String GUICE_INTERNAL_PACKAGE =
+        NonDelegatingClassLoaderHook.class.getPackage().getName();
+
+    public BridgeClassLoader(final ClassLoader clientClassLoader) {
+      super(clientClassLoader);
+    }
+
+    @Override
+    protected Class<?> loadClass(final String name, final boolean resolve)
+        throws ClassNotFoundException {
+
+      // delegate internal requests to Guice class space
+      if (name.startsWith(GUICE_INTERNAL_PACKAGE)) {
+        try {
+          final Class<?> clazz = getClass().getClassLoader().loadClass(name);
+          if (resolve) {
+            super.resolveClass(clazz);
+          }
+          return clazz;
+        } catch (final Exception e) {
+          // fall back to classic delegation
+        }
+      }
+
+      return super.loadClass(name, resolve);
+    }
+  }
+
+  /**
+   * Weak cache of bridge classloaders that make the Guice implementation
+   * classes visible to various code-generated proxies of client classes.
+   */
+  private static final ReferenceCache<ClassLoader, ClassLoader> CLASS_LOADER_CACHE =
+      new ReferenceCache<ClassLoader, ClassLoader>(WEAK, WEAK) {
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected ClassLoader create(final ClassLoader typeClassLoader) {
+          return doPrivileged(new PrivilegedAction<ClassLoader>() {
+            public ClassLoader run() {
+              return new BridgeClassLoader(typeClassLoader);
+            }
+          });
+        }
+      };
+
+  /**
+   * Intercepts classloading requests involving generated classes and proxies.
+   */
+  public ClassLoader intercept(final ClassLoader typeClassLoader) {
+    if (null == typeClassLoader) {
+      return CLASS_LOADER_CACHE.get(ClassLoader.getSystemClassLoader());
+    }
+    return CLASS_LOADER_CACHE.get(typeClassLoader);
+  }
+}

Property changes on: src/com/google/inject/internal/NonDelegatingClassLoaderHook.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: src/com/google/inject/internal/ClassLoaderHook.java
===================================================================
--- src/com/google/inject/internal/ClassLoaderHook.java	(revision 0)
+++ src/com/google/inject/internal/ClassLoaderHook.java	(revision 0)
@@ -0,0 +1,33 @@
+/**
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.inject.internal;
+
+/**
+ * Provide classloading interception for Guice enhanced classes and proxies.
+ * 
+ * @author mcculls@gmail.com (Stuart McCulloch)
+ */
+public interface ClassLoaderHook {
+
+  /**
+   * Intercept classloading request.
+   * 
+   * @param loader classloader involved in request
+   * @return potentially intercepted classloader
+   */
+  ClassLoader intercept(ClassLoader loader);
+}

Property changes on: src/com/google/inject/internal/ClassLoaderHook.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: src/com/google/inject/internal/GuiceCodeGen.java
===================================================================
--- src/com/google/inject/internal/GuiceCodeGen.java	(revision 0)
+++ src/com/google/inject/internal/GuiceCodeGen.java	(revision 0)
@@ -0,0 +1,93 @@
+/**
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.inject.internal;
+
+import static java.lang.reflect.Modifier.PROTECTED;
+import static java.lang.reflect.Modifier.PUBLIC;
+
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Proxy;
+
+import net.sf.cglib.core.NamingPolicy;
+import net.sf.cglib.proxy.Enhancer;
+import net.sf.cglib.reflect.FastClass;
+
+/**
+ * Handles runtime code generation for Guice.
+ * 
+ * @author mcculls@gmail.com (Stuart McCulloch)
+ */
+public final class GuiceCodeGen {
+
+  static final NamingPolicy NAMING_POLICY = new GuiceNamingPolicy();
+
+  static final ClassLoaderHook CLASSLOADER_HOOK =
+      new NonDelegatingClassLoaderHook();
+
+  /*
+   * Private/implementation classes are not visible to classes loaded by other
+   * classloaders, even when they are in the same package. Therefore we cannot
+   * intercept classloading requests for such types.
+   */
+  static boolean isHookable(final Class<?> type) {
+    return (type.getModifiers() & (PROTECTED | PUBLIC)) != 0;
+  }
+
+  public static ClassLoader getClassLoader(final Class<?> type) {
+    final ClassLoader typeClassLoader = type.getClassLoader();
+    if (isHookable(type)) {
+      return CLASSLOADER_HOOK.intercept(typeClassLoader);
+    }
+    return typeClassLoader;
+  }
+
+  public static FastClass newFastClass(final Class<?> type) {
+    final FastClass.Generator generator = new FastClass.Generator();
+
+    generator.setType(type);
+    generator.setClassLoader(getClassLoader(type));
+    generator.setNamingPolicy(NAMING_POLICY);
+
+    return generator.create();
+  }
+
+  public static Enhancer newEnhancer(final Class<?> type) {
+    final Enhancer enhancer = new Enhancer() {
+      @Override
+      protected ClassLoader getDefaultClassLoader() {
+        final ClassLoader defaultClassLoader = super.getDefaultClassLoader();
+        if (isHookable(type)) {
+          return CLASSLOADER_HOOK.intercept(defaultClassLoader);
+        }
+        return defaultClassLoader;
+      }
+    };
+
+    enhancer.setSuperclass(type);
+    enhancer.setUseCache(false); // We do enough caching.
+    enhancer.setUseFactory(false);
+    enhancer.setNamingPolicy(NAMING_POLICY);
+
+    return enhancer;
+  }
+
+  public static <T> T newProxyInstance(final Class<? extends T> type,
+      final InvocationHandler handler) {
+    return type.cast(Proxy.newProxyInstance(
+        getClassLoader(type), new Class[] {type}, handler));
+  }
+}

Property changes on: src/com/google/inject/internal/GuiceCodeGen.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: src/com/google/inject/InjectorImpl.java
===================================================================
--- src/com/google/inject/InjectorImpl.java	(revision 516)
+++ src/com/google/inject/InjectorImpl.java	(working copy)
@@ -26,7 +26,7 @@
 import com.google.inject.internal.Classes;
 import com.google.inject.internal.Errors;
 import com.google.inject.internal.ErrorsException;
-import com.google.inject.internal.GuiceFastClass;
+import com.google.inject.internal.GuiceCodeGen;
 import com.google.inject.internal.Keys;
 import com.google.inject.internal.MatcherAndConverter;
 import com.google.inject.internal.Nullability;
@@ -893,7 +893,7 @@
         };
       }
       else {
-        FastClass fastClass = GuiceFastClass.create(method.getDeclaringClass());
+        FastClass fastClass = GuiceCodeGen.newFastClass(method.getDeclaringClass());
         final FastMethod fastMethod = fastClass.getMethod(method);
 
         methodInvoker = new MethodInvoker() {
@@ -1111,7 +1111,7 @@
       }
       finally {
         // Only remove the context if this call created it.
-        reference[0] = null;
+        localContext.remove();
       }
     }
     else {
Index: src/com/google/inject/ProxyFactory.java
===================================================================
--- src/com/google/inject/ProxyFactory.java	(revision 516)
+++ src/com/google/inject/ProxyFactory.java	(working copy)
@@ -20,8 +20,7 @@
 import com.google.common.collect.Maps;
 import com.google.inject.internal.Errors;
 import com.google.inject.internal.ErrorsException;
-import com.google.inject.internal.GuiceFastClass;
-import com.google.inject.internal.GuiceNamingPolicy;
+import com.google.inject.internal.GuiceCodeGen;
 import com.google.inject.internal.ReferenceCache;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
@@ -146,17 +145,13 @@
     }
 
     // Create the proxied class.
-    Enhancer enhancer = new Enhancer();
-    enhancer.setSuperclass(declaringClass);
-    enhancer.setUseCache(false); // We do enough caching.
+    Enhancer enhancer = GuiceCodeGen.newEnhancer(declaringClass);
     enhancer.setCallbackFilter(new CallbackFilter() {
       public int accept(Method method) {
         return indices.get(method);
       }
     });
     enhancer.setCallbackTypes(callbackTypes);
-    enhancer.setUseFactory(false);
-    enhancer.setNamingPolicy(new GuiceNamingPolicy());
 
     Class<?> proxied = enhancer.createClass();
 
@@ -171,7 +166,7 @@
    */
   private <T> ConstructionProxy<T> createConstructionProxy(Errors errors, final Class<?> clazz,
       final Constructor standardConstructor) throws ErrorsException {
-    FastClass fastClass = GuiceFastClass.create(clazz);
+    FastClass fastClass = GuiceCodeGen.newFastClass(clazz);
     final FastConstructor fastConstructor
         = fastClass.getConstructor(standardConstructor.getParameterTypes());
     final List<Parameter<?>> parameters = Parameter.forConstructor(standardConstructor, errors);
Index: src/com/google/inject/ConstructionContext.java
===================================================================
--- src/com/google/inject/ConstructionContext.java	(revision 516)
+++ src/com/google/inject/ConstructionContext.java	(working copy)
@@ -18,10 +18,10 @@
 
 import com.google.inject.internal.Errors;
 import com.google.inject.internal.ErrorsException;
+import com.google.inject.internal.GuiceCodeGen;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.lang.reflect.Proxy;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -79,8 +79,7 @@
         = new DelegatingInvocationHandler<T>();
     invocationHandlers.add(invocationHandler);
 
-    Object object = Proxy.newProxyInstance(expectedType.getClassLoader(),
-        new Class[] { expectedType }, invocationHandler);
+    Object object = GuiceCodeGen.newProxyInstance(expectedType, invocationHandler);
     return expectedType.cast(object);
   }
 
Index: build.xml
===================================================================
--- build.xml	(revision 516)
+++ build.xml	(working copy)
@@ -21,8 +21,8 @@
       <zipfileset src="lib/build/asm-3.1.jar"/>
       <zipfileset src="lib/build/google-collect-snapshot-20080530.jar"/>
       <rule pattern="com.google.common.**" result="com.google.inject.internal.@1"/>
-      <rule pattern="net.sf.cglib.**" result="com.google.inject.cglib.@1"/>
-      <rule pattern="org.objectweb.asm.**" result="com.google.inject.asm.@1"/>
+      <rule pattern="net.sf.cglib.**" result="com.google.inject.internal.cglib.@1"/>
+      <rule pattern="org.objectweb.asm.**" result="com.google.inject.internal.asm.@1"/>
       <keep pattern="com.google.**"/>
     </jarjar>
   </target>
