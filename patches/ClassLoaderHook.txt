Index: src/com/google/inject/DefaultConstructionProxyFactory.java
===================================================================
--- src/com/google/inject/DefaultConstructionProxyFactory.java	(revision 379)
+++ src/com/google/inject/DefaultConstructionProxyFactory.java	(working copy)
@@ -16,8 +16,7 @@
 
 package com.google.inject;
 
-import com.google.inject.internal.GuiceFastClass;
-import com.google.inject.internal.Objects;
+import com.google.inject.internal.GuiceCodeGen;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Modifier;
@@ -55,7 +54,7 @@
     }
 
     Class<T> classToConstruct = constructor.getDeclaringClass();
-    FastClass fastClass = GuiceFastClass.create(classToConstruct);
+    FastClass fastClass = GuiceCodeGen.getFastClass(classToConstruct);
     final FastConstructor fastConstructor
         = fastClass.getConstructor(constructor);
     return new ConstructionProxy<T>() {
Index: src/com/google/inject/internal/GuiceFastClass.java
===================================================================
--- src/com/google/inject/internal/GuiceFastClass.java	(revision 379)
+++ src/com/google/inject/internal/GuiceFastClass.java	(working copy)
@@ -1,39 +0,0 @@
-/**
- * Copyright (C) 2006 Google Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.google.inject.internal;
-
-import net.sf.cglib.reflect.FastClass;
-
-/**
- * Gives Guice classes custom names.
- *
- * @author crazybob@google.com (Bob Lee)
- */
-public class GuiceFastClass {
-
-  public static FastClass create(Class type) {
-    return create(type.getClassLoader(), type);
-  }
-
-  public static FastClass create(ClassLoader loader, Class type) {
-    FastClass.Generator generator = new FastClass.Generator();
-    generator.setType(type);
-    generator.setClassLoader(loader);
-    generator.setNamingPolicy(new GuiceNamingPolicy());
-    return generator.create();
-  }
-}
Index: src/com/google/inject/internal/GuiceCodeGen.java
===================================================================
--- src/com/google/inject/internal/GuiceCodeGen.java	(revision 0)
+++ src/com/google/inject/internal/GuiceCodeGen.java	(revision 0)
@@ -0,0 +1,97 @@
+/**
+ * Copyright (C) 2007 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.inject.internal;
+
+import com.google.inject.ClassLoaderHook;
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Proxy;
+import net.sf.cglib.proxy.Enhancer;
+import net.sf.cglib.reflect.FastClass;
+
+/**
+ * Handles all code generation for Guice.
+ *
+ * @author stuart.mcculloch@jayway.net (Stuart McCulloch)
+ */
+public class GuiceCodeGen {
+
+  static final ClassLoader INTERNAL_LOADER =
+      GuiceCodeGen.class.getClassLoader();
+
+  static final ClassLoaderHook DEFAULT_CLASSLOADER_HOOK =
+      new ClassLoaderHook() {
+        public ClassLoader get(ClassLoader internalLoader,
+            ClassLoader typeLoader) {return typeLoader;}
+      };
+
+  static final ThreadLocal<ClassLoaderHook> THREAD_CLASS_LOADER_HOOK =
+      new InheritableThreadLocal<ClassLoaderHook>() {
+        protected ClassLoaderHook initialValue() {
+          return DEFAULT_CLASSLOADER_HOOK;
+        }
+      };
+
+  public static ClassLoaderHook getThreadClassLoaderHook() {
+    return THREAD_CLASS_LOADER_HOOK.get();
+  }
+
+  public static void setThreadClassLoaderHook(ClassLoaderHook classLoaderHook) {
+    if (classLoaderHook != null) {
+      THREAD_CLASS_LOADER_HOOK.set(classLoaderHook);
+    } else {
+      THREAD_CLASS_LOADER_HOOK.remove();
+    }
+  }
+
+  public static ClassLoader getClassLoader(Class<?> type) {
+    return getThreadClassLoaderHook().get(
+        INTERNAL_LOADER, type.getClassLoader());
+  }
+
+  public static FastClass getFastClass(Class<?> type) {
+    FastClass.Generator generator = new FastClass.Generator();
+
+    generator.setType(type);
+    generator.setClassLoader(getClassLoader(type));
+    generator.setNamingPolicy(new GuiceNamingPolicy());
+
+    return generator.create();
+  }
+
+  static class GuiceEnhancer extends Enhancer {
+    protected ClassLoader getDefaultClassLoader() {
+      return getThreadClassLoaderHook().get(
+          INTERNAL_LOADER, super.getDefaultClassLoader());
+    }
+  }
+
+  public static Enhancer getEnhancer(Class<?> type) {
+    Enhancer enhancer = new GuiceEnhancer();
+
+    enhancer.setSuperclass(type);
+    enhancer.setUseCache(false); // We do enough caching.
+    enhancer.setUseFactory(false);
+    enhancer.setNamingPolicy(new GuiceNamingPolicy());
+
+    return enhancer;
+  }
+
+  public static Object getProxy(Class<?> type, InvocationHandler handler) {
+    return Proxy.newProxyInstance(getClassLoader(type),
+        new Class[] {type}, handler);
+  }
+}

Property changes on: src/com/google/inject/internal/GuiceCodeGen.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: src/com/google/inject/InjectorImpl.java
===================================================================
--- src/com/google/inject/InjectorImpl.java	(revision 379)
+++ src/com/google/inject/InjectorImpl.java	(working copy)
@@ -17,7 +17,7 @@
 package com.google.inject;
 
 import com.google.inject.internal.Classes;
-import com.google.inject.internal.GuiceFastClass;
+import com.google.inject.internal.GuiceCodeGen;
 import com.google.inject.internal.ReferenceCache;
 import com.google.inject.internal.StackTraceElements;
 import com.google.inject.internal.ToStringBuilder;
@@ -913,7 +913,8 @@
         };
       }
       else {
-        FastClass fastClass = GuiceFastClass.create(method.getDeclaringClass());
+        FastClass fastClass =
+            GuiceCodeGen.getFastClass(method.getDeclaringClass());
         final FastMethod fastMethod = fastClass.getMethod(method);
 
         this.methodInvoker = new MethodInvoker() {
@@ -1152,7 +1153,7 @@
       }
       finally {
         // Only remove the context if this call created it.
-        reference[0] = null;
+        localContext.remove();
       }
     }
     else {
Index: src/com/google/inject/ProxyFactory.java
===================================================================
--- src/com/google/inject/ProxyFactory.java	(revision 379)
+++ src/com/google/inject/ProxyFactory.java	(working copy)
@@ -16,9 +16,7 @@
 
 package com.google.inject;
 
-import com.google.inject.internal.GuiceFastClass;
-import com.google.inject.internal.GuiceNamingPolicy;
-import com.google.inject.internal.Objects;
+import com.google.inject.internal.GuiceCodeGen;
 import com.google.inject.internal.ReferenceCache;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
@@ -140,17 +138,13 @@
     }
 
     // Create the proxied class.
-    Enhancer enhancer = new Enhancer();
-    enhancer.setSuperclass(declaringClass);
-    enhancer.setUseCache(false); // We do enough caching.
+    Enhancer enhancer = GuiceCodeGen.getEnhancer(declaringClass);
     enhancer.setCallbackFilter(new CallbackFilter() {
       public int accept(Method method) {
         return indices.get(method);
       }
     });
     enhancer.setCallbackTypes(callbackTypes);
-    enhancer.setUseFactory(false);
-    enhancer.setNamingPolicy(new GuiceNamingPolicy());
 
     Class<?> proxied = enhancer.createClass();
 
@@ -165,7 +159,7 @@
    */
   <T> ConstructionProxy<T> createConstructionProxy(Class<?> clazz,
       Class[] parameterTypes) {
-    FastClass fastClass = GuiceFastClass.create(clazz);
+    FastClass fastClass = GuiceCodeGen.getFastClass(clazz);
     final FastConstructor fastConstructor
         = fastClass.getConstructor(parameterTypes);
     return new ConstructionProxy<T>() {
Index: src/com/google/inject/util/GuiceContainer.java
===================================================================
--- src/com/google/inject/util/GuiceContainer.java	(revision 0)
+++ src/com/google/inject/util/GuiceContainer.java	(revision 0)
@@ -0,0 +1,110 @@
+/*
+ * Copyright (C) 2007 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.inject.util;
+
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+import java.util.logging.Logger;
+import com.google.inject.ClassLoaderHook;
+import com.google.inject.CreationException;
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+import com.google.inject.Module;
+import com.google.inject.Stage;
+import com.google.inject.internal.GuiceCodeGen;
+
+/**
+ * Static utility methods for embedding Guice inside a container that has its
+ * own classloading strategy. For example a web application server or OSGi.
+ *
+ * @author stuart.mcculloch@jayway.net (Stuart McCulloch)
+ */
+public final class GuiceContainer {
+
+  private GuiceContainer() {}
+
+  /**
+   * Creates an injector for the given set of modules.
+   *
+   * @throws CreationException if one or more errors occur during Injector
+   *     construction
+   */
+  public static Injector createInjector(ClassLoaderHook classLoaderHook,
+      Module... modules) {
+    return createInjector(classLoaderHook, Arrays.asList(modules));
+  }
+
+  /**
+   * Creates an injector for the given set of modules.
+   *
+   * @throws CreationException if one or more errors occur during Injector
+   *     construction
+   */
+  public static Injector createInjector(ClassLoaderHook classLoaderHook,
+      Iterable<? extends Module> modules) {
+    return createInjector(classLoaderHook, Stage.DEVELOPMENT, modules);
+  }
+
+  /**
+   * Creates an injector for the given set of modules, in a given development
+   * stage.
+   *
+   * @throws CreationException if one or more errors occur during Injector
+   *     construction
+   */
+  public static Injector createInjector(ClassLoaderHook classLoaderHook,
+      Stage stage, Module... modules) {
+    return createInjector(classLoaderHook, stage, Arrays.asList(modules));
+  }
+
+  /**
+   * Creates an injector for the given set of modules, in a given development
+   * stage.
+   *
+   * @throws CreationException if one or more errors occur during Injector
+   *     construction
+   */
+  public static Injector createInjector(final ClassLoaderHook classLoaderHook,
+      Stage stage, Iterable<? extends Module> modules)
+  {
+    // avoid potential leak by eagerly loading logging subsystem
+    Logger.getAnonymousLogger();
+
+    // use container classloading when creating the injector
+    GuiceCodeGen.setThreadClassLoaderHook(classLoaderHook);
+    try {
+      final Injector injector = Guice.createInjector(stage, modules);
+      return (Injector)GuiceCodeGen.getProxy(Injector.class,
+          new InvocationHandler() {
+            public Object invoke(Object proxy, Method method, Object[] args)
+                throws Throwable {
+              // use container classloading when using the injector
+              GuiceCodeGen.setThreadClassLoaderHook(classLoaderHook);
+              try {
+                return method.invoke(injector, args);
+              } finally {
+                GuiceCodeGen.setThreadClassLoaderHook(null);
+              }
+            }
+          }
+      );
+    } finally {
+      GuiceCodeGen.setThreadClassLoaderHook(null);
+    }
+  }
+}

Property changes on: src/com/google/inject/util/GuiceContainer.java
___________________________________________________________________
Name: svn:eol-style
   + native

Index: src/com/google/inject/ConstructionContext.java
===================================================================
--- src/com/google/inject/ConstructionContext.java	(revision 379)
+++ src/com/google/inject/ConstructionContext.java	(working copy)
@@ -19,10 +19,11 @@
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.lang.reflect.Proxy;
 import java.util.ArrayList;
 import java.util.List;
 
+import com.google.inject.internal.GuiceCodeGen;
+
 /**
  * Context of a dependency construction. Used to manage circular references.
  *
@@ -80,8 +81,7 @@
         = new DelegatingInvocationHandler<T>();
     invocationHandlers.add(invocationHandler);
 
-    Object object = Proxy.newProxyInstance(expectedType.getClassLoader(),
-        new Class[] { expectedType }, invocationHandler);
+    Object object = GuiceCodeGen.getProxy(expectedType, invocationHandler);
     return expectedType.cast(object);
   }
 
Index: src/com/google/inject/ClassLoaderHook.java
===================================================================
--- src/com/google/inject/ClassLoaderHook.java	(revision 0)
+++ src/com/google/inject/ClassLoaderHook.java	(revision 0)
@@ -0,0 +1,34 @@
+/**
+ * Copyright (C) 2007 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.inject;
+
+/**
+ * Provide classloading interception for Guice enhanced classes and proxies.
+ * 
+ * @author stuart.mcculloch@jayway.net (Stuart McCulloch)
+ */
+public interface ClassLoaderHook {
+
+  /**
+   * Intercept classloading of enhanced class/proxy based on user type.
+   * 
+   * @param internalLoader classloader that loaded Guice internals
+   * @param typeLoader classloader that loaded the user type
+   * @return classloader to use for the enhanced class/proxy
+   */
+  ClassLoader get(ClassLoader internalLoader, ClassLoader typeLoader);
+}

Property changes on: src/com/google/inject/ClassLoaderHook.java
___________________________________________________________________
Name: svn:eol-style
   + native

